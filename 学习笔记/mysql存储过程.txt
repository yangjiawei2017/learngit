mysql存储过程
DELIMITER $$

DROP PROCEDURE IF EXISTS `yang`.`getallproducts`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getallproducts`()
begin
select * from yang.bookcategory;
end$$
---------------------------------------------------------------------------------------------------------------------------------------------------------
DELIMITER ;
要在存储过程中申明一个变量，可以使用declare语句，例如：
declare variable_name datatype(size) default default_value;
--declare关键字后面指定变量名，变量名必须遵守MySQL列名称的命名规则
指定变量的数据类型及其大小，变量可以是任何MySQL数据类型
--当申明一个变量时他的初始值是NULL，但可以使用DEFAULT关键字来改变其默认值
declare total_sale int default 0;(也可以同时为多个变量指定默认值)
set total_count = 10; (set可以为变量分配一个值)
--除了set语句之外，还可以使用select into 语句将查询的结果分配给一个变量
例如： declare total_products int default 0
       select count(*) into total_products from products
变量作用域；以@符号开头的变量时会话变量，指导会话结束前都是可以访问的
---------------------------------------------------------------------------------------------------------------------------------------------------------
mysql存储过程参数简介；
--in 是默认模式，在存储过程中定义in参数时，程序必须将参数传递给存储过程
in参数的值被保护
--out 可以在存储过程中更改out参数的值，并将更改后新值传递会调用程序。
存储过程在启动时无法访问out参数的初始值
--inout 
储存过程中定义参数的语法如下；
mode param_name param_type(param_size)
>>存储过程示例
delimiter
use yang
create procedure getofficeByCountry(in countryName varchar(255))
 begin
 select * from offices where country = countryName;
 end
delimiter;
--call getofficeByCountry('CNA') 查询所有在中国的办事处
----------------------------------------------------------------------------------------------------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE CountOrderByStatus(
 IN orderStatus VARCHAR(25),
 OUT total INT)
BEGIN
 SELECT count(orderNumber)
 INTO total
 FROM orders
 WHERE status = orderStatus;
END$$
--call CountOrderByStatus('Shipped',@total);
--select @total

DELIMITER $$
CREATE PROCEDURE set_counter(INOUT count INT(4),IN inc INT(4))
BEGIN
 SET count = count + inc;
END$$
DELIMITER ;
SET @counter = 1;
--CALL set_counter(@counter,1); -- 2
--CALL set_counter(@counter,1); -- 3
--CALL set_counter(@counter,5); -- 8
--SELECT @counter; -- 8
--************************************************************************************--
mysql存储过程返回多个值：

mysql if 语法；
if expression then
	statements;
end if;
mysql if else 语法；
if expression then
	statements;
else
	else-statements;
end if;
mysql if elseif else 语法：
IF expression THEN
   statements;
ELSEIF elseif-expression THEN
   elseif-statements;
...
ELSE
   else-statements;
END IF;

简单case语句：
case case_expression
	when when_expression then commands
	when when_expression then commands
	...
	else commands
end case;

while循环：
while expression do
	statements
end while

mysql 游标简介
--要处理存储过程中的结果集，可以使用游标，游标允许迭代查询返回的一组行，并相应的
处理每行，mysql游标为只读，不可滚动和敏感
>>不可滚动 只能按照select语句确定的顺序获取行，不能以相反的顺序获取行，此外，不能
跳过行或跳转到结果集中的特定行
>>敏感     有两种游标，敏感游标和不敏感游标，敏感游标指向实际数据，不敏感游标
使用数据的临时副本，敏感游标执行速度更快，因为他不需要临时拷贝数据，但是，对
其他连接的数据所做的任何更改都将影响敏感游标使用的数据
--****************************************************************************************************************************--
--使用mysql游标
>>使用declare语句声明游标
declare cursor_name cursor for select_statement;
>>使用open语句打开游标。open语句初始化游标的结果集，因此必须在从结果集中提取行之前
调用open语句
open cursor_name;
>>使用fetch语句来检索光标指向的下一行，并将光标移动到结果集中的下一行
fetch cursor_name into variables list;
close cursor_name;
>>使用mysql游标时，还必须声明一个not found处理程序来处理当游标找不到任何行时的情况。
因为每次调用fetch语句时，游标会尝试读取结果集中的下一行。
声明一个not found 处理程序：
declare continue handler for not found set finished = 1;
finished是一个变量，指示光标到达结果集的结尾，处理程序声明必须出现在存储过程中的变量
和游标声明之后
                  ┍┅No┅┑  
                  𠄌      ┃
declare → open → fetch → empty →yes→ close
--*****************************************************************************************************************************--
mysql 游标示例：
declare finished integer default 0;
declare email varchar(255) default "";
--declare cursor for employee email 
declare email_cursor cursor for select email from employee;
--declare not found handler
declare countinue handler  for not found set finished = 1;
>>open email_cursor;
>>get_email:loop
   fetch email_cursor into v_email;
   if v_finished = 1 then
   leave get_email;
   end if;
   set email_list = concat(v_email,";",email_list);
  end loop get_email;
>>close email_cursor;
--*****************************************************************************************************************************--
DELIMITER $$

CREATE PROCEDURE build_email_list (INOUT email_list varchar(4000))
BEGIN

 DECLARE v_finished INTEGER DEFAULT 0;
        DECLARE v_email varchar(100) DEFAULT "";
		
 -- declare cursor for employee email
 DEClARE email_cursor CURSOR FOR 
 SELECT email FROM employees;

 -- declare NOT FOUND handler
 DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET v_finished = 1;

 OPEN email_cursor;

 get_email: LOOP

 FETCH email_cursor INTO v_email;

 IF v_finished = 1 THEN 
 LEAVE get_email;
 END IF;

 -- build email list
 SET email_list = CONCAT(v_email,";",email_list);

 END LOOP get_email;

 CLOSE email_cursor;

END$$

DELIMITER ;
SQL
可以使用以下脚本测试build_email_list存储过程：

SET @email_list = "";
CALL build_email_list(@email_list);
SELECT @email_list;
--*********************************************************************************************************************************************************--

mysql 列出存储过程
--显示存储过程字符
----要显示存储过程的字符，使用show procedure status
show procedure status [like 'pattern'|where expr];

mysql 异常处理：
--要声明一个处理程序，可以使用declare handler
declare action handler for condition_value statement;
如果条件的值与condition_value匹配，mysql执行statement
>>condition_value接受以下值之一：
>>一个MySQL错误代码
>>标准SQLSTATE值或者它可以是SQLWARNING，NOTFOUND或SQLEXCEPTION条件，这是SQLSTATE值类的简写。NOTFOUND条件用于游标或SELECT INTO variable_list语句。
>>与MySQL错误代码或SQLSTATE值相关联的命名条件。
例：declare continue handler for sqlexception set has_error = 1;
--如果发生错误回滚上一个操作，并退出当前代码块，如果在存储过程的begin end 块中声明他，则会立即终止存储过程
    declare exit handler for sqlexception
	begin
	rollback;
	select 'An error has occurred,operation rollbacked and the stored procedure was terminated';
	end;

mysql signal和esignal语句
--使用signal语句在存储过程中向调用者返回错误或警告条件，signal语法提供了对返回值的信息的控制
例： singal sqlstate|condition_name;
	 set condition_information_item_name_1 = value_1;
	     condition_information_item_name_2 = value_2;
 >>condition_information_item_name 可以是messsage_text,mysql_errorno,curdor_name
45000是一个通用的sqlstate值，用于说明未处理的用户定义异常

mysql 存储函数语法
create function function_name(param1,param2)
	return datatype
	[not] deterministic
   statements
>>>默认情况下所有参数均为in参数，不能为参数参数指定in,out,inout,修饰
>>>如果存储函数包含sql语句，不应在其他sql语句中使用他，否则，存储函数将减慢查询的速度




mysql触发器
sql触发器是存储在数据库目录中的一组sql语句，每当与表相关联的事件发生时，就会执行或
触发sql触发器，例如插入，更新或删除
sql触发器是一种特殊的存储过程，触发器和存储过程的之间的主要区别在于，当对表执行数据
修改事件是，会自动调用触发器，而存储过程必须要明确的调用
---优点
1.sql触发器提供了检查数据完整性的替代方法
2.sql触发器可以捕获数据库层中业务逻辑中的错误
3.sql触发器提供了运行计划任务的另一种方法，通过使用sql触发器，不必等待运行计划的任务，
因为在对表中的数据进行更改之前或之后自动调用触发器
4.sql触发器对于审核表中的数据的更改非常有用
---缺点
1.sql触发器只能提供扩张验证，并且不发替换所有验证，一些简单的验证必须在应用层完成
2.从客户端应用程序调用和执行sql触发器不可见，因此很难弄清数据库层中发生的情况
3.sql触发器可能会增加数据库服务器的开销

before insert
after insert
before update
after update
before deleter
after delete

命名格式：(before|after)_tableName_(insert|update|delete)或
          tablename_(before|after)_(insert|update|delete)
---mysql触发限制
不能再以下几种情况下触发触发器：
1.使用show,load data,load table,backup database,restore,flush和return语句之上
2.使用隐式或明确提交或回滚的语句

---------------------------------------------------------------------------
为了创建一个新的触发器，可以使用CREATE TRIGGER语句
create trigger trigger_name trigger_time trigger_event
on table_name
for each row
begin
...
end;
将触发器名称放在CREATE TRIGGER语句之后。触发器名称应遵循命名约定[trigger time]_[table name]_[trigger event]，例如before_employees_update。
触发激活时间可以在之前或之后。必须指定定义触发器的激活时间。如果要在更改之前处理操作，则使用BEFORE关键字，如果在更改后需要处理操作，则使用AFTER关键字。
触发事件可以是INSERT，UPDATE或DELETE。此事件导致触发器被调用。 触发器只能由一个事件调用。要定义由多个事件调用的触发器，必须定义多个触发器，每个事件一个触发器。
触发器必须与特定表关联。没有表触发器将不存在，所以必须在ON关键字之后指定表名。
将SQL语句放在BEGIN和END块之间。这是定义触发器逻辑的位置。
------------------------------------------------------------------------
DELIMITER $$
CREATE TRIGGER before_employee_update 
    BEFORE UPDATE ON employees
    FOR EACH ROW 
BEGIN
    INSERT INTO employees_audit
    SET action = 'update',
     employeeNumber = OLD.employeeNumber,
        lastname = OLD.lastname,
        changedat = NOW(); 
END$$
DELIMITER ;
在触发器的主体中，使用OLD关键字来访问受触发器影响的行的employeeNumber和lastname列。
请注意，在为INSERT定义的触发器中，可以仅使用NEW关键字。不能使用OLD关键字。但是，在为DELETE定义的触发器中，没有新行，因此您只能使用OLD关键字。在UPDATE触发器中，OLD是指更新前的行，而NEW是更新后的行。
----------------------------------------------------------------------------
管理触发器
通过查询information_schema数据库中的triggers表来显示触发器，
删除触发器：drop trigger trigger_name;
----------------------------------------------------------------------------
mysql 事件
创建mysql事件：
create event [if not exist] event_name
on schedule schedule
do
event_body
如果要禁用并停止事件调度程序线程可以使用如下语句：
set global event_schedule = off;



------------------------------------------------------------------------------
事务
原子性
一致性
隔离性
持久性

查看mysql的端口号：show global variables like 'port';
CREATE TABLE `user` (
   `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户ID',
   `name` varchar(50) NOT NULL DEFAULT '' COMMENT '名称',
   `sex` int(1) NOT NULL DEFAULT '0' COMMENT '0为男，1为女',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8
 /*!50100 PARTITION BY RANGE (id)
 (PARTITION p0 VALUES LESS THAN (3) ENGINE = InnoDB,
  PARTITION p1 VALUES LESS THAN (6) ENGINE = InnoDB,
  PARTITION p2 VALUES LESS THAN (9) ENGINE = InnoDB,
  PARTITION p3 VALUES LESS THAN (12) ENGINE = InnoDB) */
  
  
mysql备份与恢复数据库
备份：mysqldump -h host -u root -p dbname > dbname_backup.sql 
恢复：mysqladmin -h myhost -u root -p create dbname
      mysql -h host -u root -p dbname < dbnmae_backup.sql 
















































































